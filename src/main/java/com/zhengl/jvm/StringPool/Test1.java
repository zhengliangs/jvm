package com.zhengl.jvm.StringPool;

/**
 * @author hero良
 * @classname Test1
 */
public class Test1 {

    /**
     * new String("字面量") 执行这行代码的时候,
     * 会创建一个"字面量"的对象,并把引用存放在字符串常量池中,
     * 然后继续执行new命令,会在堆中创建一个"字面量"的对象,
     * 但是,不会把引用存放在字符串常量池中,
     * 通过new创建的String对象只有调用intern才会存放到字符串常量池中
     * @author hero良
     */
    public static void main(String[] args) {
        
        //首先在堆中创建"hello"对象,并存放在字符串常量池中;
        //然后继续执行new指令,new指令会在堆中创建"hello"对象,并赋值给s1,
        //但是不会存放在字符串常量池中;
        //这个时候堆中有两个"hello"对象,但是字符串常量池中只有一个,
        String s1 = new String("hello");
        //在字符串常量池中查找有没有内容为"hello"的对象,
        //有就把字符串常量池中的对象返回,没有就创建,并存放在字符串常量池中返回引用,
        //字符串常量池中已经有"hello"对象，所以直接返回给s2
        String s2 = "hello";
        //同样会在字符串常量池中查找有没有内容为"hello"的对象,
        //有就返回，没有就把s1存放在字符串常量池中并返回引用,
        //但是不会改变s1的指向,这里没有变量来接受,所以可以忽略
        s1.intern();
        //这个时候s1指向堆中的String实例 s2指向常量池中的String实例。所以不相等
        System.out.println(s1 == s2);//false


        //会创建"hel"和"lo"两个对象,然后存放到字符串常量池;
        //因为有 + 号,内部会创建一个StringBuilder对象,使用append方法进行拼接,
        //最后调用toString方法得到一个内容是"hello"的对象,并赋值给s3,
        //注意,并没有把hello对象放到字符串常量池中;
        String s3 = new String("hel") + new String("lo");
        //会在字符串常量池中查找有没有内容为"hello"的对象,
        //有就把字符串常量池中的对象返回,没有就创建,并存放在字符串常量池中返回引用,
        //这个时候,字符串常量池中没有"hello"对象,
        //所以会在堆中创建一个"hello"的对象,然后存放在字符串常量池,并赋值给s4;
        String s4 = "hello";
        //这行代码同样会在字符串常量池中查找有没有内容为"hello"的对象,
        //有就返回，没有就把s3存放在字符串常量池中并返回引用,
        //但是不会改变s3的指向,这里没有变量来接受,所以可以忽略
        s3.intern();
        //这个时候s3指向堆中的对象 s4指向字符串常量池中的对象,所以不相等
        System.out.println(s3 == s4);//false


        //这行代码会创建"hello"对象,并存放在字符串常量池中,
        //然后继续执行new指令,new指令会在堆中创建"java"对象,并赋值给t1,
        //但是不会存放在字符串常量池中;
        String t1 = new String("hello");
        //这行代码同样会在字符串常量池中查找有没有内容为"hello"的对象,
        //有就返回，没有就把t1存放在字符串常量池中并返回引用,
        t1.intern();
        //会在字符串常量池中查找有没有内容为"hello"的对象,
        //有就把字符串常量池中的对象返回,没有就创建,并存放在字符串常量池中返回引用,
        //这个时候,字符串常量池中已经有"hello"对象了,所以直接赋值给t2;
        String t2 = "hello";
        //这个时候t1指向堆中的对象 t2指向字符串常量池中的对象，所以不相等
        System.out.println(t1 == t2);//false


        //会创建"wor"和"ld"两个对象,然后存放到字符串常量池;
        //因为有 + 号,内部会创建一个StringBuilder对象,使用append方法进行拼接,
        //最后调用toString方法得到一个内容是"world"的对象,并赋值给t3,
        //注意,并没有把world对象放到字符串常量池中;
        String t3 = new String("wor") + new String("ld");
        //这行代码会在字符串常量池中查找有没有内容为"world"的对象,
        //有就返回，没有就把t1存放在字符串常量池中并返回引用,
        //这个时候字符串常量池中没有"world"的对象,
        //所以会把t3指向的引用存放到字符串常量池中,
        t3.intern();
        //这行代码也会在字符串常量池中查找有没有内容为"world"的对象,
        //有就把字符串常量池中的对象返回,没有就创建,并存放在字符串常量池中返回引用,
        //这个时候字符串常量池中已经有"world"对象了,
        //所以直接把字符串常量池中的"world"对象赋值给t4
        String t4 = "world";
        //这个时候t3指向堆中的对象 t4虽然指向字符串常量池中的对象,
        //但是字符串常量池中的对象是通过t3.intern()存放进去的,
        //也就是说，字符串常量池中的"world"对象和t3指向同一个对象,
        //所以t3和t4相等
        System.out.println(t3 == t4);//true
    }

}
